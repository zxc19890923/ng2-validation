注意：

验证是在组件重定义的变量，然后通过界面中的 #username="ngModel"这个样式来验证的，和[(ngModel)]="username"无关
提交按钮可以设置如果验证不通过，就处于只读状态<button [disabled]="!myform.form.valid">提交</button>

1、安装模块

npm install ng2-validation --save
2、配置app.module.ts

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import {CustomFormsModule} from "ng2-validation";
...
imports: [
    FormsModule,
    CustomFormsModule,
    ReactiveFormsModule
  ],
...
3、配置组件，官方文档有详细的配置方法。

import {Component} from '@angular/core';
// 1. 引入forms中的组件
import {FormGroup, FormControl} from '@angular/forms';
// 2. 引入ng2-validation中的组件
import {CustomValidators} from 'ng2-validation';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  // 3. 定义表单组
  form:FormGroup;

  constructor() {
    // 4. 初始化表达组里面的内容
    this.form = new FormGroup({
      // 定义form.field 是一个区间
      field: new FormControl('', CustomValidators.range([5, 9])),
      // 定义form.num 是数字类型
      num: new FormControl('', CustomValidators.number)
    });
  }
}
4、配置模板，使用

<br/>
<br/>
<br/>
<div class="container">
  <form #myForm="ngForm">
    <div>
      <input type="text" [(ngModel)]="form.field" name="field" #field="ngModel" [rangeLength]="[5, 9]"
             class="form-control" required/>
      <p class="text-danger" *ngIf="field.errors?.rangeLength">输入字符长度在5-9之间</p>
    </div>
    <p></p>
    <div>
      <input type="text" [(ngModel)]="form.num" name="num" #num="ngModel" number class="form-control" required/>
      <p class="text-danger" *ngIf="num.errors?.number">只能输入数字</p>
    </div>
    <p></p>
    <!--这个是提交按钮,如果条件不满足, 提价按钮为只读-->
    <p>
      <button [disabled]="num.errors?.number || !myForm.form.valid" class="btn btn-primary">提交</button>
    </p>
  </form>
</div>

5、添加多个条件

1. 组件配置
constructor() {
    // 初始化表达组里面的内容
    this.form = new FormGroup({
      username: new FormControl('', CustomValidators.range([5, 9])),
      max: new FormControl('', CustomValidators.max(100)),
      min: new FormControl('', CustomValidators.min(0)),
      num: new FormControl('', CustomValidators.number),
      phone: new FormControl('', CustomValidators.phone('zh-CN'))
    });
  }
2. 模块配置
<div>
      <input type="text" [(ngModel)]="form.num" name="num" #num="ngModel" #max="ngModel" #min="ngModel" number class="form-control" required
             placeholder="年龄" [max]="100" [min]="0"/>
      <p class="text-danger" *ngIf="num.errors?.number || max.errors?.max || min.errors?.min">只能输入0-100数字</p>
</div>



3、注册表单实例
<div class="container">
  <div class="row">
    <div class="col-sm-6 col-sm-offset-3">
      <form #register="ngForm">
        <p>
          <input type="text" [(ngModel)]="register.username" name="username" #username="ngModel" [rangeLength]="[4, 20]"
                 class="form-control" required placeholder="用户名"/>
        </p>
        <p class="text-danger" *ngIf="username.errors?.rangeLength">输入字符长度在4-20之间</p>

        <p>
          <input type="password" [(ngModel)]="register.password" name="password" #password="ngModel"
                 [rangeLength]="[6, 18]"
                 class="form-control" required placeholder="密码"/>
        </p>
        <p class="text-danger" *ngIf="password.errors?.rangeLength">
          密码在6-18位之间
        </p>
        <p>
          <input type="password" [(ngModel)]="register.secondPassword" name="secondPassword" #secondPassword="ngModel"
                 class="form-control" required placeholder="再次输入密码" [equalTo]="password"
          />
        </p>
        <p class="text-danger" *ngIf="secondPassword.errors?.equalTo">两次输入密码不一致</p>


        <p>
          <button class="btn btn-primary" [disabled]="!register.form.valid">提交</button>
        </p>
      </form>
    </div>
  </div>
</div>

import {Component} from "@angular/core";
import {FormGroup, FormControl, Validator} from "@angular/forms";
import {CustomValidators} from "ng2-validation";

@Component({
  selector: "app-register",
  templateUrl: "register.component.html"
})
export class RegisterComponent {
  // 这里定义了register对象, 所以可以使用register里面的元素配置ngModel
  register:FormGroup;

  constructor() {
    let username = new FormControl('', CustomValidators.range([4, 20]));
    let password = new FormControl('', CustomValidators.range([6, 16]));
    let secondPassword = new FormControl('', CustomValidators.equalTo(password));
    let email = new FormControl('', CustomValidators.email);
    let phone = new FormControl('', CustomValidators.phone('zh-CN'));
    let position = new FormControl('', CustomValidators.range([4, 20]));
    let address = new FormControl('', CustomValidators.range([0, 200]));

    this.register = new FormGroup({
      username: username,
      password: password,
      secondPassword: secondPassword,
      email: email,
      phone: phone,
      position: position,
      address: address
    })
  }
}

